ON le 04/04/2019
-----------------
Logiciel de test du CPLD (5M570CT100C5N) de la carte AA2380v1 de l'OSVA.

Version 0 du 28/08/2019.
------------------------
Les leds tricolores CMS sont rouges pendant la phase de calibration
==> mode calib avec appui long sur bouton.

==> changement de sample rate par appui court dur codeur
de manière séquenciele : 48k-96k-192k ..


Explication des straps J17:
---------------------------

CONF 0 = Single-Ended / Differential (Left Channel)
CONF 1 = Analog Filter bandwidth (Left Channel)

CONF 2 = Single-Ended / Differential (Right Channel)
CONF 3 = Analog Filter bandwidth (Right Channel)

Connecteur de test J12 :
----------------------------
UI0 0	= I2S LRCK
UI0 1	= I2S BCK
UI0 2	= I2S SDATA
UI0 3	= nFS (1.5625 MHz = 100MHz/64)
UI0 4	= 128FS ()
UI0 5	= Ready (100ms on at startup)
---- Pour 6 à 9 on peut mettre des cavaliers qui tirent à la masse (pull-up)
UI0 6	= Bit 1/3  Average value LSB ( 1x to 128x )
UI0 7	= Bit 2/3  Average value ( 1x to 128x )
UI0 8	= Bit 3/3  Average value MSB ( 1x to 128x )
UI0 9	= FIR or SinC digiital filter
----
UIO 10 = CLKSLOW (=100Hz)



Autres signaux de test  J16 (connecteur isolé):
--------------------------------------------------
Note : il faut alimenter J14 en 3v3.

Pin 1  = ISOUT PIN0  = SDR SDATA
Pin 3  = ISOUT PIN1  = SDR FSYNC
Pin 5  = ISOUT PIN2  = SDR MCLK
Pin 7  = ISOUT PIN3  = SDR LRCK
Pin 9  = ISIN PIN0   = SDR DFS0
Pin 11 = ISIN PIN1   = SDR DFS1
Pin 13 = ISOUT PIN4  = SDR SCLK
Pin 15 = ISOUT PIN5  = SEnDIFF
Pin 17 = ISOUT PIN6  = HBWon
Pin 19 = ISOUT PIN7  = FIRnSinC
Pin 21 = ISIN PIN2   = SDR nRSTN
Pin 23 = ISIN PIN3   = xx
Pin 25 = ISOUT PIN8  = CAL_Pulse
Pin 27 = ISOUT PIN9  = GND
Pin 29 = ISOUT PIN10 = GND
Pin 31 = ISOUT PIN11 = GND
Pin 33 = ISIN PIN4   = xx
Pin 35 = ISIN PIN5   = xx


Tests of 21/09/19
-----------------
(For simpler debug, we remove digital HPF)

1/ Only left channel is send o both L/R SPDIF output
We see that LRCK is near 100% duty cycle and must be 50%!
2/ The averaging values others than max avg are not working.
(The avg set value is not send to ADC read function ?...)
3/ Sine wave at input is not correctly reproduced (corrupted value..)
------------------------------------------------------------------------------------



***********************************************************************************
                   SUITE DU DEVELLOPPEMENT DU PROJET "OSVA"  
************************************************************************************
Le 22/11/2002. On repart du travail précédent pour continuer le projet avec la 10M08
------------------------------------------------------------------------------------
Quartus 16.1.0 build 196 - 10/24/2016 SJ Lite Edition 
Checksum :  002D6CCC ; Usercode : 002D6C92
Remplissage : 537 LE /570 (94%)
------------------------------------------------------------------------------------
Position des relais au repos (non alimenté):
> Filtre anti-repliement = 38.4 kHz (1= 384kHz)
> Entrées en Single-Ended sur BNC de gauche (1= Différentielle) 
JPA(CONF0)= si pas de jumper , différentielle car pull-up a 1.
JPB(CONF1)= si pas de jumper Fcuttof= 384kHz car pull-up a 1.


To do list :
------------
Mettre un retard sur la mise en route des relais (décalé 1s ?).
Inversé le fonctionnement avec les jumpers (?).

Faire la fonction qui envoie les données vers la carte 10M08 gros bloc).
Repenser la commande des leds pour être simples !

La fonction F1_ADCx2_DistributedReadAVG ne marche pas ...(à revoir ?)

23/11/20
--------
On ajoute une fonction qui permet la synchronisation des canaux L/R du
module SPDIF. On modifie aussi les couleurs de Leds.
Délai de 1s pour les relais au démarrage.
A tester..



 
------------------------------------------------------------------------------------
Le 20/01/2021.- Mise au point version Beta -- GIT comit n° : a029cbb
CPLD : 5M570ZT100  Remplissage : 73 %  Checksum: 002F325E
------------------------------------------------------------------------------------
Cette version permet de tester les différentes fonctions finale.
En oarticulier le module "F1_readADC_multimodes" qui autorise de nombreuses combinaisons
de SR/AVG entre 32kHz et 1536kHz.

La carte codeur permet de choisir le sample rate (leds vert/jaune/orange) et si on appui 
sur le codeur alors on choisi la valeur de moyennage (que fait l'ADC) entre x1 et x128.
Certaines combinaisons ne son pas possible (limite de Fs x avg <= 1536kHz).

Résultat :
Le pilotage du codeur et des leds de la carte AA2380PAN semble OK.
On arrive à faire fonctionner la sortie SPDIF (actuellement la seule que l'on peut utiliser),
et on voit bien le SNR qui s'améliore lorsque la moyenne augmente.

Les modes normal et distribué fonctionnement, mais pas complèetement :

1) Lorsque la moyenne est égale à 1 (qq soit Fs), il semble que le données soit corrompus,
le résultat de mesure est anormal : on mesure un niveau trés faible valeur numérique fixe.

2) Il semble que seule la voie de droite soit fonctionnelle. ?
(On la retrouve sur les 2 voies avec le soft d'analyse).

3) En mode distribué, le signal de sortie passe à zéro lorsque Fs x avg = 768kHz (au lieu de 1536).
Cela semble mieux se passer en mode normal.

(A voir avec des vrais signaux !).

------------------------------------------------------------------------------------
Le 29/01/2021.- Mise au point version Beta -- GIT comit n° : 
CPLD : 5M570ZT100  Remplissage :  %  Checksum: 
------------------------------------------------------------------------------------
Correction pour avoir les 2 cannaux LR --> OK
Correction avoir les canneaux LR dans le bon sens (idem voies physque OSVA et logiciel PC avec signal S/PDIF) --> OK

----------------------------------------------------------------------------------
 -- REPRISE DU PROJET 2024
-----------------------------------------------------------------------------------
Le 18/02/2024.- Mise au point version Beta -- GIT comit n° :e5fce74 ; Tag V0.01 
CPLD : 5M570ZT100  Remplissage :  %  Checksum: 002DB32A
------------------------------------------------------------------------------------
Version intermiédaire, avec valeurs DC fixe généré en interne pour test et validation.
Valeurs : x320EA7 et x9C9F4D (voies L/R). Un module interne simule l'ADC LTC2380-24.

Les problèmes à résoudre dans cette version:
1) Mode normal (non distribué): strap JPD on monté=1
----------------------------------------------------
__ Si pas de moyenne, seul Fs=1536kHz pose problème (il semble y avoir 25 coups de clocks au lieu de 24 !)
Sortie S/PDIF toujours ok car Fsmax=192k.
__ Avec une moyenne c'est uniquement les combinaisons qui donnent nFS=1536k (le SR réel maxi)
qui ne sont pas mu correctement. On remarque des doubles impulsions sur le signal data_latch ! (surement une partie du problème).

2) Mode distribuée : strap JPD monté=0
--------------------------------------
__Si pas de moyenne, seul Fs=1536kHz pose problème (il y abien pourtant ici 24 coups de clocks)
Sortie S/PDIF toujours ok car Fsmax=192k.
__Avec une moyenne c'est uniquement les combinaisons qui donnent nFS=1536k (le SR réel maxi)
qui ne sont pas mu correctement. On remarque des doubles impulsions sur le signal data_latch ! (surement une partie du problème).

NOTE IMPORTANTE :
-----------------
On remarque un comportement différents si on compile avec ou sans les signaux de test !
Faire bien attention, les timings sont criiques lorsque le SR devient important.
clock a  10ns !!!
La prioritée est de faire un bloc de génération des horloges  partir du 100MHz
mais avec un clock enable pour éviter les retard de divisions.


----------------------------------------------------------------------------------
Le 22/03/2024.- version de test intermédiaire -- GIT comit n° : ; Tag V0.02 
CPLD : 5M570ZT100  Remplissage : 93%  Checksum: 002E045A Usercode:002E041C
------------------------------------------------------------------------------------
Cette nouvelle version est fortement retravaillée.
Tester uniquement avec un module d'émulation de l'ADC dans le CPLD pour tester la relecture des données
à toutes les fréquences d'échantillonnage et dans tous les mode (Normal et distribué).
Ici, les tests de relecture sont concluant entre FS=12kHz et Fs=1536kHz dans le mode distribué et 
dans toutes les valeurs de moyennage entre 1 et 128.
En mode normal, seule la position 1536kHz moyenne=1 semble parfois poser des problèmes de lecture.
Les problèmes de la version v0.01 ont été resolus sauf ce qui est indiqué ci-dessus).

Il faut maintenant vérifie avec l'ADC réel que ça foncionne bien !!!
------------------------------------------------------------------------------------

---------------------------------------------------------------------------------
Le 24/03/2025.- Version pour carte USB-I2S 768kHz -- GIT comit n° : ; Tag V 
CPLD : 5M570ZT100  Remplissage : ??? %  Checksum:  Usercode:
------------------------------------------------------------------------------------
Reprise du CPLD pour avoir une sortie I2S pour la nouvelle carte USB-I2S de "bohrok2610" (Martii) qui permet
l'acquisition jusqu'à 768kHz sous Windows/Linux en UAC2 avec REW (Carte basé sur un uC STM32F723).
--> La sortie I2S sera sur le connecteur 20 points J12 non isolé (isolement déjà fait sur carte USBI2S).
Les signaux necessaires sont :
--> LRCK,SDATA et BCK pour  la liaison I2S stéréo (3 sorties)
--> 4 bits pour la selection des fréquences d'échantillonnages (4 entrées: DFS0,DF1,DFS2 et MCLK_SEL)
--> Le signal de remise à zéro nRESET pour l'initialisation au démarrage de la carte USB-I2S.
TOTAL de 8 signaux (3 OUT + 5 IN) .11 IO sont disponible sur le connecteur J12, 2 pins avec du 3.3V 
(alimentation optos carte USBI2S) et 5 pins de masses.

Le fonctionnement souhaité est:
Selection du SR auto (USBI2S) ou manual (codeur).
Ajout signal pour mode manuel.
SR à supporter: 44.1 kHz à 768 kHz.
Empécher des valeurs de moyennage non supportées. Exemple :
A 48 kHz, avg maxi = 32 car 48x32 = 1536k.
A 384kHz, avg maxi = 4 carte 384x4 = 1536k.
Mappage de ces signaux sur la carte AA2380V1, J12 Unisolated (OPT I/O)
_______________________________________ 
MCLKSEL  <-- J12-5      NC   -->J12-6
DFS0     <-- J12-7      +3V3 -->J12-8
DFS1     <-- J12-9      +3V3 -->J12-10
DFS2     <-- J12-11     GND  -->J12-12
nRESET   <-- J12-13     GND  -->J12-14
I2S_BCK  --> J12-15     GND  -->J12-16
I2S_LRCK --> J12-17     GND  -->J12-18
I2S_SDATA--> J12-19     GND  -->J12-20
_______________________________________
Reste dipo pour le test IO_00,UIO_1 et UIO_10.

Les 4 cavaliers de configuration sur J17 sont;
CONF0 (JPA) --> Entréees en mode DIFF ou SE (Si cavalier =SE, sinon différentielle)
CONF1 (JPB) --> Filtre d'entrée analogique  (Si cavalier = LF, sinon HF)  
CONF2 (JPC) --> Mode d'aquisition distribué (Si cavalier =distribué, sinon normal) 
CONF3 (JPD) --> Mode selection SR int/ext   (Si cavalier =externe(J12), sinon interne par codeur)










